import configs

import json

with open(configs.ITEM_VOCABS, "r") as filp:
  item_vocabs = [{u"id": vocab[u"id"], u"vocabs": set(vocab[u"vocabs"]) } \
                 for vocab in json.load(filp)]

def search(keyword):
  """Search related books/courses from the keyword

  keyword: A string. Search keyword.
  returns: A list of integers representing IDs of related items

  Currently the items are generated by union of bigrams.
  """

  # Possibly TODO: normalize keywords (stopwords & stemming & cases)
  keyword = keyword.lower().replace("'s", "")
  uni_keywords = keyword.split()
  if len(uni_keywords) > 1:
    bi_keywords = [" ".join(ws) for ws in zip(uni_keywords, uni_keywords[1:])]
  else:
    bi_keywords = uni_keywords

  idset = []
  for keyword2 in bi_keywords:
    for vocab in item_vocabs:
      if keyword2 in vocab["vocabs"]:
        idset.append(vocab[u"id"])

  return list(set(idset))

if __name__ == "__main__":
  print "item_search test"
  print "python\n", search(u"python")
  print "\nmachine learning"
  print search(u"machine learning")
